[
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "insert",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "insert",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "QueuePool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "async_session",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "metadata",
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "isExtraImport": true,
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "metadata",
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "isExtraImport": true,
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SCHEMA",
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "isExtraImport": true,
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "isExtraImport": true,
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SCHEMA",
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "isExtraImport": true,
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "isExtraImport": true,
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "meta",
        "importPath": "webapp.models",
        "description": "webapp.models",
        "isExtraImport": true,
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "meta",
        "importPath": "webapp.models",
        "description": "webapp.models",
        "isExtraImport": true,
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "URLS",
        "importPath": "tests.const",
        "description": "tests.const",
        "isExtraImport": true,
        "detail": "tests.const",
        "documentation": {}
    },
    {
        "label": "URLS",
        "importPath": "tests.const",
        "description": "tests.const",
        "isExtraImport": true,
        "detail": "tests.const",
        "documentation": {}
    },
    {
        "label": "URLS",
        "importPath": "tests.const",
        "description": "tests.const",
        "isExtraImport": true,
        "detail": "tests.const",
        "documentation": {}
    },
    {
        "label": "URLS",
        "importPath": "tests.const",
        "description": "tests.const",
        "isExtraImport": true,
        "detail": "tests.const",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "conf.config",
        "description": "conf.config",
        "isExtraImport": true,
        "detail": "conf.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "conf.config",
        "description": "conf.config",
        "isExtraImport": true,
        "detail": "conf.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "conf.config",
        "description": "conf.config",
        "isExtraImport": true,
        "detail": "conf.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "conf.config",
        "description": "conf.config",
        "isExtraImport": true,
        "detail": "conf.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "conf.config",
        "description": "conf.config",
        "isExtraImport": true,
        "detail": "conf.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "conf.config",
        "description": "conf.config",
        "isExtraImport": true,
        "detail": "conf.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "conf.config",
        "description": "conf.config",
        "isExtraImport": true,
        "detail": "conf.config",
        "documentation": {}
    },
    {
        "label": "msgpack",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "msgpack",
        "description": "msgpack",
        "detail": "msgpack",
        "documentation": {}
    },
    {
        "label": "WIDTH",
        "importPath": "tests.api.file.const",
        "description": "tests.api.file.const",
        "isExtraImport": true,
        "detail": "tests.api.file.const",
        "documentation": {}
    },
    {
        "label": "HEIGHT",
        "importPath": "tests.api.file.const",
        "description": "tests.api.file.const",
        "isExtraImport": true,
        "detail": "tests.api.file.const",
        "documentation": {}
    },
    {
        "label": "MOCKED_HEX",
        "importPath": "tests.api.file.const",
        "description": "tests.api.file.const",
        "isExtraImport": true,
        "detail": "tests.api.file.const",
        "documentation": {}
    },
    {
        "label": "value",
        "importPath": "tests.api.file.const",
        "description": "tests.api.file.const",
        "isExtraImport": true,
        "detail": "tests.api.file.const",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "importPath": "tests.api.file.const",
        "description": "tests.api.file.const",
        "isExtraImport": true,
        "detail": "tests.api.file.const",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Header",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "async_sessionmaker",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncEngine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "async_sessionmaker",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "TestKafkaProducer",
        "importPath": "tests.mocking.kafka",
        "description": "tests.mocking.kafka",
        "isExtraImport": true,
        "detail": "tests.mocking.kafka",
        "documentation": {}
    },
    {
        "label": "FixtureFunctionT",
        "importPath": "tests.my_types",
        "description": "tests.my_types",
        "isExtraImport": true,
        "detail": "tests.my_types",
        "documentation": {}
    },
    {
        "label": "FixtureFunctionT",
        "importPath": "tests.my_types",
        "description": "tests.my_types",
        "isExtraImport": true,
        "detail": "tests.my_types",
        "documentation": {}
    },
    {
        "label": "kafka",
        "importPath": "webapp.db",
        "description": "webapp.db",
        "isExtraImport": true,
        "detail": "webapp.db",
        "documentation": {}
    },
    {
        "label": "kafka",
        "importPath": "webapp.db",
        "description": "webapp.db",
        "isExtraImport": true,
        "detail": "webapp.db",
        "documentation": {}
    },
    {
        "label": "kafka",
        "importPath": "webapp.db",
        "description": "webapp.db",
        "isExtraImport": true,
        "detail": "webapp.db",
        "documentation": {}
    },
    {
        "label": "redis",
        "importPath": "webapp.db",
        "description": "webapp.db",
        "isExtraImport": true,
        "detail": "webapp.db",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "webapp.main",
        "description": "webapp.main",
        "isExtraImport": true,
        "detail": "webapp.main",
        "documentation": {}
    },
    {
        "label": "orjson",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "orjson",
        "description": "orjson",
        "detail": "orjson",
        "documentation": {}
    },
    {
        "label": "ORJSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "ORJSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "ORJSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "ORJSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "Redis",
        "importPath": "redis.asyncio",
        "description": "redis.asyncio",
        "isExtraImport": true,
        "detail": "redis.asyncio",
        "documentation": {}
    },
    {
        "label": "Redis",
        "importPath": "redis.asyncio",
        "description": "redis.asyncio",
        "isExtraImport": true,
        "detail": "redis.asyncio",
        "documentation": {}
    },
    {
        "label": "ConnectionPool",
        "importPath": "redis.asyncio",
        "description": "redis.asyncio",
        "isExtraImport": true,
        "detail": "redis.asyncio",
        "documentation": {}
    },
    {
        "label": "Redis",
        "importPath": "redis.asyncio",
        "description": "redis.asyncio",
        "isExtraImport": true,
        "detail": "redis.asyncio",
        "documentation": {}
    },
    {
        "label": "file_router",
        "importPath": "webapp.api.file.router",
        "description": "webapp.api.file.router",
        "isExtraImport": true,
        "detail": "webapp.api.file.router",
        "documentation": {}
    },
    {
        "label": "file_router",
        "importPath": "webapp.api.file.router",
        "description": "webapp.api.file.router",
        "isExtraImport": true,
        "detail": "webapp.api.file.router",
        "documentation": {}
    },
    {
        "label": "file_router",
        "importPath": "webapp.api.file.router",
        "description": "webapp.api.file.router",
        "isExtraImport": true,
        "detail": "webapp.api.file.router",
        "documentation": {}
    },
    {
        "label": "get_file_resize_cache",
        "importPath": "webapp.cache.key_builder",
        "description": "webapp.cache.key_builder",
        "isExtraImport": true,
        "detail": "webapp.cache.key_builder",
        "documentation": {}
    },
    {
        "label": "get_user_files",
        "importPath": "webapp.crud.user_file",
        "description": "webapp.crud.user_file",
        "isExtraImport": true,
        "detail": "webapp.crud.user_file",
        "documentation": {}
    },
    {
        "label": "get_redis",
        "importPath": "webapp.db.redis",
        "description": "webapp.db.redis",
        "isExtraImport": true,
        "detail": "webapp.db.redis",
        "documentation": {}
    },
    {
        "label": "ImageResizeResponse",
        "importPath": "webapp.schema.file.resize",
        "description": "webapp.schema.file.resize",
        "isExtraImport": true,
        "detail": "webapp.schema.file.resize",
        "documentation": {}
    },
    {
        "label": "ImageResize",
        "importPath": "webapp.schema.file.resize",
        "description": "webapp.schema.file.resize",
        "isExtraImport": true,
        "detail": "webapp.schema.file.resize",
        "documentation": {}
    },
    {
        "label": "ImageResizeResponse",
        "importPath": "webapp.schema.file.resize",
        "description": "webapp.schema.file.resize",
        "isExtraImport": true,
        "detail": "webapp.schema.file.resize",
        "documentation": {}
    },
    {
        "label": "ResizeStatusEnum",
        "importPath": "webapp.schema.file.resize",
        "description": "webapp.schema.file.resize",
        "isExtraImport": true,
        "detail": "webapp.schema.file.resize",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "webapp.schema.file.resized",
        "description": "webapp.schema.file.resized",
        "isExtraImport": true,
        "detail": "webapp.schema.file.resized",
        "documentation": {}
    },
    {
        "label": "JwtTokenT",
        "importPath": "webapp.utils.auth.jwt",
        "description": "webapp.utils.auth.jwt",
        "isExtraImport": true,
        "detail": "webapp.utils.auth.jwt",
        "documentation": {}
    },
    {
        "label": "jwt_auth",
        "importPath": "webapp.utils.auth.jwt",
        "description": "webapp.utils.auth.jwt",
        "isExtraImport": true,
        "detail": "webapp.utils.auth.jwt",
        "documentation": {}
    },
    {
        "label": "JwtTokenT",
        "importPath": "webapp.utils.auth.jwt",
        "description": "webapp.utils.auth.jwt",
        "isExtraImport": true,
        "detail": "webapp.utils.auth.jwt",
        "documentation": {}
    },
    {
        "label": "jwt_auth",
        "importPath": "webapp.utils.auth.jwt",
        "description": "webapp.utils.auth.jwt",
        "isExtraImport": true,
        "detail": "webapp.utils.auth.jwt",
        "documentation": {}
    },
    {
        "label": "JwtTokenT",
        "importPath": "webapp.utils.auth.jwt",
        "description": "webapp.utils.auth.jwt",
        "isExtraImport": true,
        "detail": "webapp.utils.auth.jwt",
        "documentation": {}
    },
    {
        "label": "jwt_auth",
        "importPath": "webapp.utils.auth.jwt",
        "description": "webapp.utils.auth.jwt",
        "isExtraImport": true,
        "detail": "webapp.utils.auth.jwt",
        "documentation": {}
    },
    {
        "label": "jwt_auth",
        "importPath": "webapp.utils.auth.jwt",
        "description": "webapp.utils.auth.jwt",
        "isExtraImport": true,
        "detail": "webapp.utils.auth.jwt",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "DEPS_LATENCY",
        "importPath": "webapp.metrics",
        "description": "webapp.metrics",
        "isExtraImport": true,
        "detail": "webapp.metrics",
        "documentation": {}
    },
    {
        "label": "metrics",
        "importPath": "webapp.metrics",
        "description": "webapp.metrics",
        "isExtraImport": true,
        "detail": "webapp.metrics",
        "documentation": {}
    },
    {
        "label": "auth_router",
        "importPath": "webapp.api.login.router",
        "description": "webapp.api.login.router",
        "isExtraImport": true,
        "detail": "webapp.api.login.router",
        "documentation": {}
    },
    {
        "label": "auth_router",
        "importPath": "webapp.api.login.router",
        "description": "webapp.api.login.router",
        "isExtraImport": true,
        "detail": "webapp.api.login.router",
        "documentation": {}
    },
    {
        "label": "auth_router",
        "importPath": "webapp.api.login.router",
        "description": "webapp.api.login.router",
        "isExtraImport": true,
        "detail": "webapp.api.login.router",
        "documentation": {}
    },
    {
        "label": "get_user",
        "importPath": "webapp.crud.user",
        "description": "webapp.crud.user",
        "isExtraImport": true,
        "detail": "webapp.crud.user",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "importPath": "webapp.schema.login.user",
        "description": "webapp.schema.login.user",
        "isExtraImport": true,
        "detail": "webapp.schema.login.user",
        "documentation": {}
    },
    {
        "label": "UserLoginResponse",
        "importPath": "webapp.schema.login.user",
        "description": "webapp.schema.login.user",
        "isExtraImport": true,
        "detail": "webapp.schema.login.user",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "importPath": "webapp.schema.login.user",
        "description": "webapp.schema.login.user",
        "isExtraImport": true,
        "detail": "webapp.schema.login.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "webapp.models.sirius.user",
        "description": "webapp.models.sirius.user",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "webapp.models.sirius.user",
        "description": "webapp.models.sirius.user",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.user",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "importPath": "webapp.utils.auth.password",
        "description": "webapp.utils.auth.password",
        "isExtraImport": true,
        "detail": "webapp.utils.auth.password",
        "documentation": {}
    },
    {
        "label": "selectinload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "AIOKafkaProducer",
        "importPath": "aiokafka.producer",
        "description": "aiokafka.producer",
        "isExtraImport": true,
        "detail": "aiokafka.producer",
        "documentation": {}
    },
    {
        "label": "AIOKafkaProducer",
        "importPath": "aiokafka.producer",
        "description": "aiokafka.producer",
        "isExtraImport": true,
        "detail": "aiokafka.producer",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "MetaData",
        "importPath": "sqlalchemy.schema",
        "description": "sqlalchemy.schema",
        "isExtraImport": true,
        "detail": "sqlalchemy.schema",
        "documentation": {}
    },
    {
        "label": "enum",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "enum",
        "description": "enum",
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "stop_producer",
        "importPath": "webapp.on_shutdown",
        "description": "webapp.on_shutdown",
        "isExtraImport": true,
        "detail": "webapp.on_shutdown",
        "documentation": {}
    },
    {
        "label": "create_producer",
        "importPath": "webapp.on_startup.kafka",
        "description": "webapp.on_startup.kafka",
        "isExtraImport": true,
        "detail": "webapp.on_startup.kafka",
        "documentation": {}
    },
    {
        "label": "start_redis",
        "importPath": "webapp.on_startup.redis",
        "description": "webapp.on_startup.redis",
        "isExtraImport": true,
        "detail": "webapp.on_startup.redis",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "prometheus_client",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "prometheus_client",
        "description": "prometheus_client",
        "detail": "prometheus_client",
        "documentation": {}
    },
    {
        "label": "CONTENT_TYPE_LATEST",
        "importPath": "prometheus_client",
        "description": "prometheus_client",
        "isExtraImport": true,
        "detail": "prometheus_client",
        "documentation": {}
    },
    {
        "label": "REGISTRY",
        "importPath": "prometheus_client",
        "description": "prometheus_client",
        "isExtraImport": true,
        "detail": "prometheus_client",
        "documentation": {}
    },
    {
        "label": "CollectorRegistry",
        "importPath": "prometheus_client",
        "description": "prometheus_client",
        "isExtraImport": true,
        "detail": "prometheus_client",
        "documentation": {}
    },
    {
        "label": "generate_latest",
        "importPath": "prometheus_client",
        "description": "prometheus_client",
        "isExtraImport": true,
        "detail": "prometheus_client",
        "documentation": {}
    },
    {
        "label": "AIOKafkaConsumer",
        "importPath": "aiokafka",
        "description": "aiokafka",
        "isExtraImport": true,
        "detail": "aiokafka",
        "documentation": {}
    },
    {
        "label": "MultiProcessCollector",
        "importPath": "prometheus_client.multiprocess",
        "description": "prometheus_client.multiprocess",
        "isExtraImport": true,
        "detail": "prometheus_client.multiprocess",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "starlette.requests",
        "description": "starlette.requests",
        "isExtraImport": true,
        "detail": "starlette.requests",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "starlette.responses",
        "description": "starlette.responses",
        "isExtraImport": true,
        "detail": "starlette.responses",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "conf.config",
        "description": "conf.config",
        "peekOfCode": "class Settings(BaseSettings):\n    BIND_IP: str\n    BIND_PORT: int\n    DB_URL: str\n    JWT_SECRET_SALT: str\n    KAFKA_BOOTSTRAP_SERVERS: List[str]\n    KAFKA_TOPIC: str\n    REDIS_HOST: str\n    REDIS_PORT: int\n    REDIS_PASSWORD: str",
        "detail": "conf.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "conf.config",
        "description": "conf.config",
        "peekOfCode": "settings = Settings()",
        "detail": "conf.config",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "scripts.load_data",
        "description": "scripts.load_data",
        "peekOfCode": "parser = argparse.ArgumentParser()\nparser.add_argument('fixtures', nargs='+', help='<Required> Set flag')\nargs = parser.parse_args()\nasync def main(fixtures: List[str]) -> None:\n    for fixture in fixtures:\n        fixture_path = Path(fixture)\n        model = metadata.tables[fixture_path.stem]\n        with open(fixture_path, 'r') as file:\n            values = json.load(file)\n        async with async_session() as session:",
        "detail": "scripts.load_data",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "scripts.load_data",
        "description": "scripts.load_data",
        "peekOfCode": "args = parser.parse_args()\nasync def main(fixtures: List[str]) -> None:\n    for fixture in fixtures:\n        fixture_path = Path(fixture)\n        model = metadata.tables[fixture_path.stem]\n        with open(fixture_path, 'r') as file:\n            values = json.load(file)\n        async with async_session() as session:\n            await session.execute(insert(model).values(values))\n            await session.commit()",
        "detail": "scripts.load_data",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "tests.api.auth.info.test_info",
        "description": "tests.api.auth.info.test_info",
        "peekOfCode": "BASE_DIR = Path(__file__).parent\nFIXTURES_PATH = BASE_DIR / 'fixtures'\n@pytest.mark.parametrize(\n    ('username', 'password', 'expected_status', 'fixtures'),\n    [\n        (\n            'test',\n            'qwerty',\n            status.HTTP_200_OK,\n            [",
        "detail": "tests.api.auth.info.test_info",
        "documentation": {}
    },
    {
        "label": "FIXTURES_PATH",
        "kind": 5,
        "importPath": "tests.api.auth.info.test_info",
        "description": "tests.api.auth.info.test_info",
        "peekOfCode": "FIXTURES_PATH = BASE_DIR / 'fixtures'\n@pytest.mark.parametrize(\n    ('username', 'password', 'expected_status', 'fixtures'),\n    [\n        (\n            'test',\n            'qwerty',\n            status.HTTP_200_OK,\n            [\n                FIXTURES_PATH / 'sirius.user.json',",
        "detail": "tests.api.auth.info.test_info",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "tests.api.auth.login.test_login",
        "description": "tests.api.auth.login.test_login",
        "peekOfCode": "BASE_DIR = Path(__file__).parent\nFIXTURES_PATH = BASE_DIR / 'fixtures'\n@pytest.mark.parametrize(\n    ('username', 'password', 'expected_status', 'expected_access_token', 'fixtures'),\n    [\n        (\n            'invalid_user',\n            'password',\n            status.HTTP_401_UNAUTHORIZED,\n            False,",
        "detail": "tests.api.auth.login.test_login",
        "documentation": {}
    },
    {
        "label": "FIXTURES_PATH",
        "kind": 5,
        "importPath": "tests.api.auth.login.test_login",
        "description": "tests.api.auth.login.test_login",
        "peekOfCode": "FIXTURES_PATH = BASE_DIR / 'fixtures'\n@pytest.mark.parametrize(\n    ('username', 'password', 'expected_status', 'expected_access_token', 'fixtures'),\n    [\n        (\n            'invalid_user',\n            'password',\n            status.HTTP_401_UNAUTHORIZED,\n            False,\n            [",
        "detail": "tests.api.auth.login.test_login",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "tests.api.file.const",
        "description": "tests.api.file.const",
        "peekOfCode": "BASE_DIR = Path(__file__).parent\nWIDTH = 123\nHEIGHT = 123\nMOCKED_HEX = 'mocked_hex'\nwith open(BASE_DIR / 'test_file', 'rb') as file:\n    image = file.read()\nvalue = msgpack.packb(\n    {\n        'image': image,\n        'task_id': MOCKED_HEX,",
        "detail": "tests.api.file.const",
        "documentation": {}
    },
    {
        "label": "WIDTH",
        "kind": 5,
        "importPath": "tests.api.file.const",
        "description": "tests.api.file.const",
        "peekOfCode": "WIDTH = 123\nHEIGHT = 123\nMOCKED_HEX = 'mocked_hex'\nwith open(BASE_DIR / 'test_file', 'rb') as file:\n    image = file.read()\nvalue = msgpack.packb(\n    {\n        'image': image,\n        'task_id': MOCKED_HEX,\n        'width': WIDTH,",
        "detail": "tests.api.file.const",
        "documentation": {}
    },
    {
        "label": "HEIGHT",
        "kind": 5,
        "importPath": "tests.api.file.const",
        "description": "tests.api.file.const",
        "peekOfCode": "HEIGHT = 123\nMOCKED_HEX = 'mocked_hex'\nwith open(BASE_DIR / 'test_file', 'rb') as file:\n    image = file.read()\nvalue = msgpack.packb(\n    {\n        'image': image,\n        'task_id': MOCKED_HEX,\n        'width': WIDTH,\n        'height': HEIGHT,",
        "detail": "tests.api.file.const",
        "documentation": {}
    },
    {
        "label": "MOCKED_HEX",
        "kind": 5,
        "importPath": "tests.api.file.const",
        "description": "tests.api.file.const",
        "peekOfCode": "MOCKED_HEX = 'mocked_hex'\nwith open(BASE_DIR / 'test_file', 'rb') as file:\n    image = file.read()\nvalue = msgpack.packb(\n    {\n        'image': image,\n        'task_id': MOCKED_HEX,\n        'width': WIDTH,\n        'height': HEIGHT,\n    }",
        "detail": "tests.api.file.const",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 5,
        "importPath": "tests.api.file.const",
        "description": "tests.api.file.const",
        "peekOfCode": "value = msgpack.packb(\n    {\n        'image': image,\n        'task_id': MOCKED_HEX,\n        'width': WIDTH,\n        'height': HEIGHT,\n    }\n)",
        "detail": "tests.api.file.const",
        "documentation": {}
    },
    {
        "label": "FIXTURES_PATH",
        "kind": 5,
        "importPath": "tests.api.file.test_resize",
        "description": "tests.api.file.test_resize",
        "peekOfCode": "FIXTURES_PATH = BASE_DIR / 'fixtures'\n@pytest.mark.parametrize(\n    ('username', 'password', 'fixtures', 'mocked_hex', 'width', 'height', 'kafka_expected_messages'),\n    [\n        (\n            'test',\n            'qwerty',\n            [\n                FIXTURES_PATH / 'sirius.user.json',\n            ],",
        "detail": "tests.api.file.test_resize",
        "documentation": {}
    },
    {
        "label": "kafka_received_messages",
        "kind": 2,
        "importPath": "tests.api.conftest",
        "description": "tests.api.conftest",
        "peekOfCode": "def kafka_received_messages() -> List:\n    return []\n@pytest.fixture()\nasync def access_token(\n    client: AsyncClient,\n    username: str,\n    password: str,\n) -> str:\n    response = await client.post(URLS['auth']['login'], json={'username': username, 'password': password})\n    return response.json()['access_token']",
        "detail": "tests.api.conftest",
        "documentation": {}
    },
    {
        "label": "TestKafkaProducer",
        "kind": 6,
        "importPath": "tests.mocking.kafka",
        "description": "tests.mocking.kafka",
        "peekOfCode": "class TestKafkaProducer:\n    def __init__(self, kafka_received_messages: List[Dict[str, Any]]):\n        self.kafka_received_messages: List[Dict[str, Any]] = kafka_received_messages\n    async def send_and_wait(\n        self, topic, value=None, key=None, partition=None,\n        timestamp_ms=None, headers=None\n    ):\n        self.kafka_received_messages.append({\n            'topic': topic,\n            'value': value,",
        "detail": "tests.mocking.kafka",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def event_loop():\n    return asyncio.get_event_loop()\n@pytest.fixture(scope='session')\nasync def _migrate_db() -> FixtureFunctionT:\n    async with engine.begin() as conn:\n        await conn.run_sync(meta.metadata.create_all)\n    yield\n    async with engine.begin() as conn:\n        await conn.run_sync(meta.metadata.drop_all)",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "URLS",
        "kind": 5,
        "importPath": "tests.const",
        "description": "tests.const",
        "peekOfCode": "URLS = {\n    'auth': {\n        'login': '/auth/login',\n        'info': '/auth/info',\n    },\n    'file': {\n        'resize': '/file/resize',\n    },\n}",
        "detail": "tests.const",
        "documentation": {}
    },
    {
        "label": "FixtureFunctionT",
        "kind": 5,
        "importPath": "tests.my_types",
        "description": "tests.my_types",
        "peekOfCode": "FixtureFunctionT = None",
        "detail": "tests.my_types",
        "documentation": {}
    },
    {
        "label": "file_router",
        "kind": 5,
        "importPath": "webapp.api.file.router",
        "description": "webapp.api.file.router",
        "peekOfCode": "file_router = APIRouter(prefix='/file')",
        "detail": "webapp.api.file.router",
        "documentation": {}
    },
    {
        "label": "auth_router",
        "kind": 5,
        "importPath": "webapp.api.login.router",
        "description": "webapp.api.login.router",
        "peekOfCode": "auth_router = APIRouter(prefix='/auth')",
        "detail": "webapp.api.login.router",
        "documentation": {}
    },
    {
        "label": "get_file_resize_cache",
        "kind": 2,
        "importPath": "webapp.cache.key_builder",
        "description": "webapp.cache.key_builder",
        "peekOfCode": "def get_file_resize_cache(task_id: str) -> str:\n    return f'{settings.REDIS_SIRIUS_CACHE_PREFIX}:file_resize:{task_id}'",
        "detail": "webapp.cache.key_builder",
        "documentation": {}
    },
    {
        "label": "get_producer",
        "kind": 2,
        "importPath": "webapp.db.kafka",
        "description": "webapp.db.kafka",
        "peekOfCode": "def get_producer() -> AIOKafkaProducer:\n    global producer\n    return producer\ndef get_partition() -> int:\n    global partitions\n    return random.choice(partitions)",
        "detail": "webapp.db.kafka",
        "documentation": {}
    },
    {
        "label": "get_partition",
        "kind": 2,
        "importPath": "webapp.db.kafka",
        "description": "webapp.db.kafka",
        "peekOfCode": "def get_partition() -> int:\n    global partitions\n    return random.choice(partitions)",
        "detail": "webapp.db.kafka",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "kind": 2,
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "peekOfCode": "def create_engine() -> AsyncEngine:\n    return create_async_engine(\n        settings.DB_URL,\n        poolclass=QueuePool,\n        connect_args={\n            'statement_cache_size': 0,\n        },\n    )\ndef create_session(engine: AsyncEngine | None = None) -> async_sessionmaker[AsyncSession]:\n    return async_sessionmaker(",
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "create_session",
        "kind": 2,
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "peekOfCode": "def create_session(engine: AsyncEngine | None = None) -> async_sessionmaker[AsyncSession]:\n    return async_sessionmaker(\n        bind=engine or create_engine(),\n        class_=AsyncSession,\n        autoflush=False,\n        expire_on_commit=False,\n    )\nengine = create_engine()\nasync_session = create_session(engine)\nasync def get_session() -> AsyncGenerator[AsyncSession, None]:",
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "peekOfCode": "engine = create_engine()\nasync_session = create_session(engine)\nasync def get_session() -> AsyncGenerator[AsyncSession, None]:\n    async with async_session() as session:\n        yield session",
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "async_session",
        "kind": 5,
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "peekOfCode": "async_session = create_session(engine)\nasync def get_session() -> AsyncGenerator[AsyncSession, None]:\n    async with async_session() as session:\n        yield session",
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "get_redis",
        "kind": 2,
        "importPath": "webapp.db.redis",
        "description": "webapp.db.redis",
        "peekOfCode": "def get_redis() -> Redis:\n    return redis",
        "detail": "webapp.db.redis",
        "documentation": {}
    },
    {
        "label": "File",
        "kind": 6,
        "importPath": "webapp.models.sirius.file",
        "description": "webapp.models.sirius.file",
        "peekOfCode": "class File(Base):\n    __tablename__ = 'file'\n    __table_args__ = ({'schema': DEFAULT_SCHEMA},)\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)\n    url: Mapped[str] = mapped_column(Text)\n    task_id: Mapped[str] = mapped_column(String)\n    users: Mapped[List['User']] = relationship(\n        'User',\n        secondary=f'{DEFAULT_SCHEMA}.user_file',\n        back_populates='files',",
        "detail": "webapp.models.sirius.file",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "webapp.models.sirius.user",
        "description": "webapp.models.sirius.user",
        "peekOfCode": "class User(Base):\n    __tablename__ = 'user'\n    __table_args__ = ({'schema': DEFAULT_SCHEMA},)\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)\n    username: Mapped[str] = mapped_column(String, unique=True)\n    hashed_password: Mapped[str] = mapped_column(String)\n    files: Mapped[List['File']] = relationship(\n        'File',\n        secondary=f'{DEFAULT_SCHEMA}.user_file',\n        back_populates='users',",
        "detail": "webapp.models.sirius.user",
        "documentation": {}
    },
    {
        "label": "UserFile",
        "kind": 6,
        "importPath": "webapp.models.sirius.user_file",
        "description": "webapp.models.sirius.user_file",
        "peekOfCode": "class UserFile(Base):\n    __tablename__ = 'user_file'\n    __table_args__ = ({'schema': DEFAULT_SCHEMA},)\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)\n    user_id: Mapped[int] = mapped_column(Integer, ForeignKey(f'{DEFAULT_SCHEMA}.user.id'))\n    file_id: Mapped[int] = mapped_column(Integer, ForeignKey(f'{DEFAULT_SCHEMA}.file.id'))",
        "detail": "webapp.models.sirius.user_file",
        "documentation": {}
    },
    {
        "label": "NAMING_CONVENTION",
        "kind": 5,
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "peekOfCode": "NAMING_CONVENTION = {\n    'ix': 'ix_%(column_0_label)s',\n    'uq': 'uq_%(table_name)s_%(column_0_name)s',\n    'ck': 'ck_%(table_name)s_%(constraint_name)s',\n    'fk': 'fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s',\n    'pk': 'pk_%(table_name)s',\n}\nDEFAULT_SCHEMA = 'sirius'\nmetadata = MetaData(naming_convention=NAMING_CONVENTION)\nBase = declarative_base(metadata=metadata)",
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SCHEMA",
        "kind": 5,
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "peekOfCode": "DEFAULT_SCHEMA = 'sirius'\nmetadata = MetaData(naming_convention=NAMING_CONVENTION)\nBase = declarative_base(metadata=metadata)",
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "metadata",
        "kind": 5,
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "peekOfCode": "metadata = MetaData(naming_convention=NAMING_CONVENTION)\nBase = declarative_base(metadata=metadata)",
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "peekOfCode": "Base = declarative_base(metadata=metadata)",
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "ImageResize",
        "kind": 6,
        "importPath": "webapp.schema.file.resize",
        "description": "webapp.schema.file.resize",
        "peekOfCode": "class ImageResize(BaseModel):\n    image: UploadFile\n    width: int = Form()\n    height: int = Form()\nclass ResizeStatusEnum(enum.Enum):\n    status = 'status'\nclass ImageResizeResponse(BaseModel):\n    status: ResizeStatusEnum\n    task_id: str",
        "detail": "webapp.schema.file.resize",
        "documentation": {}
    },
    {
        "label": "ResizeStatusEnum",
        "kind": 6,
        "importPath": "webapp.schema.file.resize",
        "description": "webapp.schema.file.resize",
        "peekOfCode": "class ResizeStatusEnum(enum.Enum):\n    status = 'status'\nclass ImageResizeResponse(BaseModel):\n    status: ResizeStatusEnum\n    task_id: str",
        "detail": "webapp.schema.file.resize",
        "documentation": {}
    },
    {
        "label": "ImageResizeResponse",
        "kind": 6,
        "importPath": "webapp.schema.file.resize",
        "description": "webapp.schema.file.resize",
        "peekOfCode": "class ImageResizeResponse(BaseModel):\n    status: ResizeStatusEnum\n    task_id: str",
        "detail": "webapp.schema.file.resize",
        "documentation": {}
    },
    {
        "label": "File",
        "kind": 6,
        "importPath": "webapp.schema.file.resized",
        "description": "webapp.schema.file.resized",
        "peekOfCode": "class File(BaseModel):\n    url: str\n    task_id: str\n    model_config = ConfigDict(from_attributes=True)\nclass User(BaseModel):\n    files: List[File]\n    username: str\n    model_config = ConfigDict(from_attributes=True)",
        "detail": "webapp.schema.file.resized",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "webapp.schema.file.resized",
        "description": "webapp.schema.file.resized",
        "peekOfCode": "class User(BaseModel):\n    files: List[File]\n    username: str\n    model_config = ConfigDict(from_attributes=True)",
        "detail": "webapp.schema.file.resized",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "kind": 6,
        "importPath": "webapp.schema.login.user",
        "description": "webapp.schema.login.user",
        "peekOfCode": "class UserLogin(BaseModel):\n    username: str\n    password: str\nclass UserLoginResponse(BaseModel):\n    access_token: str",
        "detail": "webapp.schema.login.user",
        "documentation": {}
    },
    {
        "label": "UserLoginResponse",
        "kind": 6,
        "importPath": "webapp.schema.login.user",
        "description": "webapp.schema.login.user",
        "peekOfCode": "class UserLoginResponse(BaseModel):\n    access_token: str",
        "detail": "webapp.schema.login.user",
        "documentation": {}
    },
    {
        "label": "JwtTokenT",
        "kind": 6,
        "importPath": "webapp.utils.auth.jwt",
        "description": "webapp.utils.auth.jwt",
        "peekOfCode": "class JwtTokenT(TypedDict):\n    uid: str\n    exp: datetime\n    user_id: int\n@dataclass\nclass JwtAuth:\n    secret: str\n    def create_token(self, user_id: int) -> str:\n        access_token = {\n            'uid': uuid.uuid4().hex,",
        "detail": "webapp.utils.auth.jwt",
        "documentation": {}
    },
    {
        "label": "JwtAuth",
        "kind": 6,
        "importPath": "webapp.utils.auth.jwt",
        "description": "webapp.utils.auth.jwt",
        "peekOfCode": "class JwtAuth:\n    secret: str\n    def create_token(self, user_id: int) -> str:\n        access_token = {\n            'uid': uuid.uuid4().hex,\n            'exp': datetime.utcnow() + timedelta(days=6),\n            'user_id': user_id,\n        }\n        return jwt.encode(access_token, self.secret)\n    def validate_token(self, authorization: Annotated[str, Header()]) -> JwtTokenT:",
        "detail": "webapp.utils.auth.jwt",
        "documentation": {}
    },
    {
        "label": "jwt_auth",
        "kind": 5,
        "importPath": "webapp.utils.auth.jwt",
        "description": "webapp.utils.auth.jwt",
        "peekOfCode": "jwt_auth = JwtAuth(settings.JWT_SECRET_SALT)",
        "detail": "webapp.utils.auth.jwt",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "kind": 2,
        "importPath": "webapp.utils.auth.password",
        "description": "webapp.utils.auth.password",
        "peekOfCode": "def hash_password(password: str) -> str:\n    return hashlib.md5(password.encode()).hexdigest()",
        "detail": "webapp.utils.auth.password",
        "documentation": {}
    },
    {
        "label": "setup_middleware",
        "kind": 2,
        "importPath": "webapp.main",
        "description": "webapp.main",
        "peekOfCode": "def setup_middleware(app: FastAPI) -> None:\n    # CORS Middleware should be the last.\n    # See https://github.com/tiangolo/fastapi/issues/1663 .\n    app.add_middleware(\n        CORSMiddleware,\n        allow_origins=['*'],\n        allow_credentials=True,\n        allow_methods=['*'],\n        allow_headers=['*'],\n    )",
        "detail": "webapp.main",
        "documentation": {}
    },
    {
        "label": "setup_routers",
        "kind": 2,
        "importPath": "webapp.main",
        "description": "webapp.main",
        "peekOfCode": "def setup_routers(app: FastAPI) -> None:\n    app.add_route('/metrics', metrics)\n    app.include_router(auth_router)\n    app.include_router(file_router)\n@asynccontextmanager\nasync def lifespan(app: FastAPI) -> AsyncIterator[None]:\n    await start_redis()\n    await create_producer()\n    print('START APP')\n    yield",
        "detail": "webapp.main",
        "documentation": {}
    },
    {
        "label": "create_app",
        "kind": 2,
        "importPath": "webapp.main",
        "description": "webapp.main",
        "peekOfCode": "def create_app() -> FastAPI:\n    app = FastAPI(docs_url='/swagger', lifespan=lifespan)\n    setup_middleware(app)\n    setup_routers(app)\n    return app",
        "detail": "webapp.main",
        "documentation": {}
    },
    {
        "label": "metrics",
        "kind": 2,
        "importPath": "webapp.metrics",
        "description": "webapp.metrics",
        "peekOfCode": "def metrics(request: Request) -> Response:\n    if 'prometheus_multiproc_dir' in os.environ:\n        registry = CollectorRegistry()\n        MultiProcessCollector(registry)\n    else:\n        registry = REGISTRY\n    return Response(generate_latest(registry), headers={'Content-Type': CONTENT_TYPE_LATEST})",
        "detail": "webapp.metrics",
        "documentation": {}
    },
    {
        "label": "DEFAULT_BUCKETS",
        "kind": 5,
        "importPath": "webapp.metrics",
        "description": "webapp.metrics",
        "peekOfCode": "DEFAULT_BUCKETS = (\n    0.005,\n    0.01,\n    0.025,\n    0.05,\n    0.075,\n    0.1,\n    0.125,\n    0.15,\n    0.175,",
        "detail": "webapp.metrics",
        "documentation": {}
    },
    {
        "label": "DEPS_LATENCY",
        "kind": 5,
        "importPath": "webapp.metrics",
        "description": "webapp.metrics",
        "peekOfCode": "DEPS_LATENCY = prometheus_client.Histogram(\n    'sirius_deps_latency_seconds',\n    '',\n    ['endpoint'],\n    buckets=DEFAULT_BUCKETS,\n)\ndef metrics(request: Request) -> Response:\n    if 'prometheus_multiproc_dir' in os.environ:\n        registry = CollectorRegistry()\n        MultiProcessCollector(registry)",
        "detail": "webapp.metrics",
        "documentation": {}
    }
]